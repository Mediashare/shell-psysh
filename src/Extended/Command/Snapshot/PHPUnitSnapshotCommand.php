<?php

namespace Psy\Extended\Command\Snapshot;


use Psy\Command\Command;
use Psy\Extended\Command\BaseCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Psy\Extended\Service\PHPUnitSnapshotService;

class PHPUnitSnapshotCommand extends \Psy\Extended\Command\BaseCommand
{

    public function __construct()
    {
        parent::__construct('phpunit:snapshot');
    }

    protected function configure(): void
    {
        $this
            ->setDescription('CrÃ©er un snapshot du rÃ©sultat d\'une expression')
            ->addArgument('expression', InputArgument::REQUIRED, 'Expression Ã  capturer (ex: $result)')
            ->addArgument('name', InputArgument::OPTIONAL, 'Nom du snapshot')
            ->addOption('name', null, InputOption::VALUE_OPTIONAL, 'Nom du snapshot (alternative Ã  l\'argument)')
            ->addOption('desc', null, InputOption::VALUE_OPTIONAL, 'Description du snapshot');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // Validation automatique des arguments
        if (!$this->validateArguments($input, $output)) {
            return 2;
        }

        $expression = $input->getArgument('expression');
        
        // GÃ©rer le nom (prioritÃ©: option --name > argument name > auto-gÃ©nÃ©rÃ©)
        $nameOption = $input->getOption('name');
        $nameArg = $input->getArgument('name');
        
        // Si aucun nom n'est fourni, utiliser un nom sÃ©quentiel
        if (!$nameOption && !$nameArg) {
            $name = $this->generateSequentialSnapshotName();
        } else {
            $name = $nameOption ?: $nameArg;
        }
        
        $description = $input->getOption('desc');
        
        try {
            // PrÃ©parer le contexte avec les variables existantes
            $contextVars = $this->getContext()->getAll();
            
            // ExÃ©cuter l'expression avec le contexte des variables
            $result = $this->executePhpCodeWithContext("return {$expression};", $contextVars);
            
            if (is_string($result) && strpos($result, 'Erreur:') === 0) {
                $output->writeln($this->formatError("Impossible d'Ã©valuer l'expression: {$result}"));
                return 1;
            }
            
            // Stocker le snapshot dans le contexte du shell
            $this->setContextVariable($name, $result);
            
            // CrÃ©er le snapshot avec le service ou fallback
            $snapshot = $this->createSnapshotData($name, $result);
            
            // Afficher le rÃ©sultat
            $output->writeln("ğŸ“¸ Snapshot crÃ©Ã© : {$name}");
            $output->writeln("$" . $name);
            
            // Afficher la description si fournie
            if ($description) {
                $output->writeln($this->formatInfo($description));
            }
            
            $output->writeln($this->formatTestCode($snapshot['assertion']));
            
            // Ajouter l'assertion au test courant si disponible
            try {
                $service = $this->phpunit();
                $currentTest = $service->getCurrentTest()?->getTestClassName();
                if ($currentTest) {
                    $service->addAssertionToTest($currentTest, $snapshot['assertion']);
                    $output->writeln($this->formatInfo("Assertion ajoutÃ©e au test {$currentTest}"));
                }
            } catch (\Exception $e) {
                // Service not available, that's okay for tests
            }
            
            return 0;
            
        } catch (\Exception $e) {
            $output->writeln($this->formatError("Erreur lors de la crÃ©ation du snapshot: " . $e->getMessage()));
            return 1;
        }
    }
    
    private function getSnapshotService(): PHPUnitSnapshotService
    {
        if (!isset($GLOBALS['phpunit_snapshot_service'])) {
            $GLOBALS['phpunit_snapshot_service'] = new PHPUnitSnapshotService();
        }
        return $GLOBALS['phpunit_snapshot_service'];
    }
    
    /**
     * GÃ©nÃ¨re un nom sÃ©quentiel pour le snapshot
     */
    private function generateSequentialSnapshotName(): string
    {
        // Chercher les snapshots existants pour dÃ©terminer le prochain numÃ©ro
        $context = $this->getContext();
        $vars = $context->getAll();
        $count = 1;
        
        while (isset($vars["snapshot_{$count}"])) {
            $count++;
        }
        
        return "snapshot_{$count}";
    }
    
    /**
     * GÃ©nÃ¨re un nom pour le snapshot basÃ© sur l'expression
     */
    private function generateSnapshotName(string $expression): string
    {
        // Simplifier l'expression pour en faire un nom valide
        $name = preg_replace('/[^a-zA-Z0-9_]/', '_', $expression);
        $name = preg_replace('/_+/', '_', $name);
        $name = trim($name, '_');
        
        // Limiter la longueur
        if (strlen($name) > 30) {
            $name = substr($name, 0, 30);
        }
        
        // Ajouter un suffix unique si nÃ©cessaire
        return 'snapshot_' . $name . '_' . time();
    }
    
    /**
     * CrÃ©er les donnÃ©es de snapshot avec ou sans service
     */
    private function createSnapshotData(string $name, $result): array
    {
        try {
            // Essayer d'utiliser le service s'il est disponible
            $snapshotService = $this->snapshot();
            return $snapshotService->createSnapshot($name, $result);
        } catch (\Exception $e) {
            // Fallback: crÃ©er les donnÃ©es directement
            return $this->createSnapshotDataFallback($name, $result);
        }
    }
    
    /**
     * CrÃ©er les donnÃ©es de snapshot sans service (fallback)
     */
    private function createSnapshotDataFallback(string $name, $result): array
    {
        return [
            'name' => $name,
            'data' => $result,
            'created_at' => date('Y-m-d H:i:s'),
            'assertion' => $this->generateAssertion($result)
        ];
    }
    
    /**
     * GÃ©nÃ©rer une assertion PHPUnit
     */
    private function generateAssertion($data): string
    {
        if (is_array($data)) {
            return '$this->assertEquals(' . var_export($data, true) . ', $actualResult);';
        } elseif (is_object($data)) {
            return '$this->assertInstanceOf(' . get_class($data) . '::class, $actualResult);';
        } elseif (is_bool($data)) {
            return '$this->assert' . ($data ? 'True' : 'False') . '($actualResult);';
        } elseif (is_null($data)) {
            return '$this->assertNull($actualResult);';
        } elseif (is_string($data)) {
            return '$this->assertEquals(' . var_export($data, true) . ', $actualResult);';
        } elseif (is_numeric($data)) {
            return '$this->assertEquals(' . $data . ', $actualResult);';
        } else {
            return '$this->assertEquals(' . var_export($data, true) . ', $actualResult);';
        }
    }
    
    /**
     * Aide complexe pour commande help dÃ©diÃ©e
     */
    protected function getRequiredArguments(): array
    {
        return ['expression'];
    }
    
    public function getComplexHelp(): string
    {
        return $this->formatComplexHelp([
            'name' => 'phpunit:snapshot',
            'description' => 'SystÃ¨me de capture et validation de rÃ©sultats pour tests PHPUnit',
            'usage' => [
                'phpunit:snapshot [expression] [name]',
                'phpunit:snapshot $result',
                'phpunit:snapshot $user->toArray() userSnapshot',
                'phpunit:snapshot $api->getResponse() --name=apiResponse'
            ],
            'options' => [
                'expression' => 'Expression PHP Ã  capturer',
                'name' => 'Nom du snapshot (optionnel, auto-gÃ©nÃ©rÃ© si omis)',
                '--name' => 'Alternative pour spÃ©cifier le nom',
                '--desc' => 'Description du snapshot'
            ],
            'examples' => [
                'phpunit:snapshot $result' => 'Capture avec nom auto-gÃ©nÃ©rÃ©',
                'phpunit:snapshot $data myData' => 'Capture avec nom spÃ©cifique',
                'phpunit:snapshot $response --name=apiCall' => 'Utilise l\'option --name',
                'phpunit:snapshot $obj --desc="User object state"' => 'Ajoute une description',
                'phpunit:snapshot $api->getResponse() apiResponse' => 'Capture une rÃ©ponse API',
                'phpunit:snapshot array_map(\'strtoupper\', [\'a\', \'b\'])' => 'Capture le rÃ©sultat d\'array_map'
            ],
            'tips' => [
                'Les snapshots capturent l\'Ã©tat complet des objets et tableaux',
                'Utilisez des noms descriptifs pour faciliter la maintenance',
                'Les assertions gÃ©nÃ©rÃ©es peuvent Ãªtre copiÃ©es dans vos tests',
                'Les snapshots sont automatiquement ajoutÃ©s au test courant'
            ],
            'related' => [
                'phpunit:assert' => 'CrÃ©e des assertions simples',
                'phpunit:create' => 'GÃ©nÃ¨re un test complet',
                'phpunit:mock' => 'CrÃ©e des mocks pour les tests'
            ]
        ]);
    }
}
