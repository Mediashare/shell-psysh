<?php

namespace Psy\Extended\Service;

class HelpService
{
    public static function displayHelp(array $projectContext): void
    {
        $framework = $projectContext['framework'];
        $type = $projectContext['type'];
        
        echo "\n";
        echo "üöÄ " . str_repeat('=', 80) . "\n";
        echo "‚ú® PsySH Shell Enhanced - {$framework}\n";
        echo str_repeat('=', 80) . "\n\n";
        
        // Commandes de monitoring
        echo "üìä COMMANDES DE MONITORING:\n";
        echo "  ‚Ä¢ monitor <code>           - Monitor l'ex√©cution du code PHP avec Xdebug\n";
        echo "  ‚Ä¢ monitor-advanced <code>  - Monitoring avanc√© avec toutes les fonctionnalit√©s\n\n";
        
        // Commandes PHPUnit de base
        echo "üß™ COMMANDES PHPUNIT DE BASE:\n";
        echo "  ‚Ä¢ phpunit:create <service> - Cr√©er un nouveau test PHPUnit interactif\n";
        echo "  ‚Ä¢ phpunit:add <method>     - Ajouter une m√©thode de test\n";
        echo "  ‚Ä¢ phpunit:code             - Entrer en mode code interactif\n";
        echo "  ‚Ä¢ phpunit:run [test]       - Ex√©cuter un test\n";
        echo "  ‚Ä¢ phpunit:export <test>    - Exporter un test vers un fichier\n";
        echo "  ‚Ä¢ phpunit:list             - Lister tous les tests actifs\n";
        echo "  ‚Ä¢ phpunit:help <class>     - Aide contextuelle pour une classe\n\n";
        
        // Commandes d'assertions
        echo "üéØ ASSERTIONS PHPUNIT:\n";
        echo "  ‚Ä¢ phpunit:assert <expr> [-m message]     - Assertion simple avec message\n";
        echo "  ‚Ä¢ phpunit:assert-type <type> <expr>      - V√©rifier le type\n";
        echo "  ‚Ä¢ phpunit:assert-instance <class> <expr> - V√©rifier l'instance\n";
        echo "  ‚Ä¢ phpunit:assert-count <num> <expr>      - V√©rifier le nombre\n";
        echo "  ‚Ä¢ phpunit:assert-empty <expr>            - V√©rifier si vide\n";
        echo "  ‚Ä¢ phpunit:assert-not-empty <expr>        - V√©rifier si non vide\n";
        echo "  ‚Ä¢ phpunit:assert-true <expr>             - V√©rifier si true\n";
        echo "  ‚Ä¢ phpunit:assert-false <expr>            - V√©rifier si false\n";
        echo "  ‚Ä¢ phpunit:assert-null <expr>             - V√©rifier si null\n";
        echo "  ‚Ä¢ phpunit:assert-not-null <expr>         - V√©rifier si non null\n\n";
        
        // Commandes d'exceptions
        echo "‚ö° ASSERTIONS D'EXCEPTIONS:\n";
        echo "  ‚Ä¢ phpunit:expect-exception <class> <expr> [-m message] - Attendre exception\n";
        echo "  ‚Ä¢ phpunit:expect-no-exception <expr>                   - Aucune exception\n\n";
        
        // Commandes de snapshots
        echo "üì∏ SNAPSHOTS ET CAPTURES:\n";
        echo "  ‚Ä¢ phpunit:snapshot <name> <expr>     - Cr√©er un snapshot\n";
        echo "  ‚Ä¢ phpunit:compare <name> <expr>      - Comparer avec snapshot\n";
        echo "  ‚Ä¢ phpunit:save-snapshot <name> [-p]  - Sauvegarder snapshot\n\n";
        
        // Commandes de configuration
        echo "‚öôÔ∏è CONFIGURATION PHPUNIT:\n";
        echo "  ‚Ä¢ phpunit:config [--show]             - Afficher/g√©rer la configuration\n";
        echo "  ‚Ä¢ phpunit:config --testsuite=<name>   - D√©finir le testsuite\n";
        echo "  ‚Ä¢ phpunit:config --coverage=<type>    - Activer coverage (html/text/clover)\n";
        echo "  ‚Ä¢ phpunit:config --bootstrap=<file>   - D√©finir le bootstrap\n";
        echo "  ‚Ä¢ phpunit:temp-config                 - Configuration temporaire\n";
        echo "  ‚Ä¢ phpunit:restore-config              - Restaurer configuration\n\n";
        
        // Commandes d'ex√©cution
        echo "üöÄ EX√âCUTION DES TESTS:\n";
        echo "  ‚Ä¢ phpunit:run                         - Ex√©cuter le test actuel\n";
        echo "  ‚Ä¢ phpunit:run-all                     - Ex√©cuter tous les tests interactifs\n";
        echo "  ‚Ä¢ phpunit:run-project [--coverage]    - Ex√©cuter les tests du projet\n";
        echo "  ‚Ä¢ phpunit:watch [-p path]             - Mode surveillance automatique\n\n";
        
        // Commandes de debugging
        echo "üêõ DEBUGGING ET ANALYSE:\n";
        echo "  ‚Ä¢ phpunit:debug [on/off/status]       - Activer/g√©rer le mode debug\n";
        echo "  ‚Ä¢ phpunit:trace                       - Afficher la stack trace du dernier √©chec\n";
        echo "  ‚Ä¢ phpunit:profile <expression>        - Profiler une expression PHP\n";
        echo "  ‚Ä¢ phpunit:explain                     - Analyser et expliquer le dernier √©chec\n\n";
        
        // Commandes de monitoring
        echo "üìä MONITORING ET M√âTRIQUES:\n";
        echo "  ‚Ä¢ phpunit:monitor [--once]            - Monitoring en temps r√©el des tests\n";
        echo "  ‚Ä¢ phpunit:benchmark <expr> [iter]     - Benchmark de performance\n";
        echo "  ‚Ä¢ phpunit:compare-performance <expr1> vs <expr2> - Comparer performances\n\n";
        
        // Commandes de gestion des tests existants
        echo "üìÅ GESTION DES TESTS EXISTANTS:\n";
        echo "  ‚Ä¢ phpunit:list-project [--type]       - Lister les tests du projet\n";
        echo "  ‚Ä¢ phpunit:run-test <path>::<method>   - Ex√©cuter un test sp√©cifique\n";
        echo "  ‚Ä¢ phpunit:import <path>::<method>     - Importer un test dans la session\n";
        echo "  ‚Ä¢ phpunit:create-file <path>          - Cr√©er un nouveau fichier de test\n\n";
        
        // Variables disponibles selon le framework
        echo "üìã VARIABLES DISPONIBLES:\n";
        
        if ($type === 'symfony') {
            echo "  Symfony:\n";
            echo "    ‚Ä¢ \$kernel          - Instance du kernel Symfony\n";
            echo "    ‚Ä¢ \$container       - Container de d√©pendances\n";
            echo "    ‚Ä¢ \$em / \$entityManager - Entity Manager Doctrine\n";
            echo "    ‚Ä¢ \$router          - Service de routage\n";
            echo "    ‚Ä¢ \$dispatcher      - Event dispatcher\n";
            echo "    ‚Ä¢ \$security        - Token storage\n";
            echo "    ‚Ä¢ \$session         - Service de session\n";
        } elseif ($type === 'laravel') {
            echo "  Laravel:\n";
            echo "    ‚Ä¢ \$app             - Instance de l'application Laravel\n";
            echo "    ‚Ä¢ \$db              - Base de donn√©es\n";
            echo "    ‚Ä¢ \$cache           - Service de cache\n";
            echo "    ‚Ä¢ \$config          - Configuration\n";
        }
        
        echo "  G√©n√©riques:\n";
        echo "    ‚Ä¢ \$projectRoot     - Racine du projet\n";
        echo "    ‚Ä¢ \$phpunitService  - Service PHPUnit\n";
        echo "    ‚Ä¢ \$project         - Informations du projet\n\n";
        
        // Exemples d'utilisation
        echo "üí° EXEMPLES D'UTILISATION:\n";
        echo "  Cr√©er et d√©velopper un test:\n";
        echo "    >>> phpunit:create App\\Service\\InvoiceService\n";
        echo "    >>> phpunit:add testCalculate\n";
        echo "    >>> phpunit:code\n";
        echo "    [Code Mode] >>> \$service = new InvoiceService();\n";
        echo "    [Code Mode] >>> \$result = \$service->calculate(100);\n";
        echo "    [Code Mode] >>> exit\n";
        echo "    >>> phpunit:assert \$result == 120\n";
        echo "    >>> phpunit:run\n";
        echo "    >>> phpunit:export InvoiceServiceTest\n\n";
        
        if ($type === 'symfony') {
            echo "  Symfony - Tester un service:\n";
            echo "    >>> \$userService = \$container->get('App\\Service\\UserService');\n";
            echo "    >>> monitor '\$userService->createUser([\"email\" => \"test@example.com\"])'\n\n";
        }
        
        echo "  Monitoring de performance:\n";
        echo "    >>> monitor 'for(\$i=0; \$i<10000; \$i++) { hash(\"sha256\", \$i); }'\n";
        echo "    >>> monitor-advanced --symfony '\$em->getRepository(User::class)->findAll()'\n\n";
        
        // Informations sur le projet
        echo "üìÅ INFORMATIONS DU PROJET:\n";
        echo "  ‚Ä¢ Type: {$type}\n";
        echo "  ‚Ä¢ Framework: {$framework}\n";
        
        if (isset($projectContext['info']['symfony_version'])) {
            echo "  ‚Ä¢ Version Symfony: {$projectContext['info']['symfony_version']}\n";
        }
        
        echo "  ‚Ä¢ R√©pertoire: " . basename($projectContext['variables']['projectRoot'] ?? getcwd()) . "\n";
        
        if ($projectContext['variables']['composerAutoloader']) {
            echo "  ‚Ä¢ Autoloader Composer: ‚úÖ Disponible\n";
        } else {
            echo "  ‚Ä¢ Autoloader Composer: ‚ùå Non trouv√©\n";
        }
        
        echo "\n";
        echo "üìù NOTES:\n";
        echo "  ‚Ä¢ Tapez 'list' pour voir toutes les commandes PsySH disponibles\n";
        echo "  ‚Ä¢ Tapez 'exit' ou Ctrl+D pour quitter\n";
        echo "  ‚Ä¢ Les variables sont persistantes entre les commandes\n";
        echo "  ‚Ä¢ Utilisez 'help()' pour revoir cette aide\n\n";
        
        echo str_repeat('=', 80) . "\n";
    }
}
