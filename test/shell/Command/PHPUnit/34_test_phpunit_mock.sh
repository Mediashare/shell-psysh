#!/bin/bash

# Test 34: Commandes phpunit:mock - Syst√®me de mocks et stubs
# Tests d'int√©gration pour les fonctionnalit√©s de mocking PHPUnit

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

# Source les biblioth√®ques de test
source "$SCRIPT_DIR/../../lib/func/loader.sh"
# Charger test_session_sync
source "$(dirname "$0")/../../lib/func/test_session_sync_enhanced.sh"

# Initialiser le test
init_test "TEST 34: Commandes phpunit:mock"

# √âtape 1: Cr√©er un test pour les mocks
'phpunit:create MockTest' \
test_session_sync "Cr√©er un test pour mocks" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Test cr√©√© : MockTest'

# √âtape 2: Cr√©er un mock simple
'phpunit:mock App\\Repository\\UserRepository' \
test_session_sync "Cr√©er un mock simple" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock cr√©√©'

# √âtape 3: Cr√©er un mock avec variable personnalis√©e
'phpunit:mock App\\Service\\PaymentService --variable $paymentMock' \
test_session_sync "Mock avec variable personnalis√©e" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock cr√©√© : $paymentMock'

# √âtape 4: Cr√©er un mock avec m√©thodes sp√©cifi√©es
'phpunit:mock App\\Service\\EmailService --methods ["send", "validate", "queue"]' \
test_session_sync "Mock avec m√©thodes" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'üîß M√©thodes mock√©es : send, validate, queue'

# √âtape 5: Mock avec arguments constructeur
'phpunit:mock App\\Service\\ConfigurableService --constructor-args ["arg1", "arg2"]' \
test_session_sync "Mock avec constructeur" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'üèóÔ∏è Arguments constructeur'

# √âtape 6: Mock partiel
'phpunit:partial-mock App\\Service\\EmailService ["send", "validate"]' \
test_session_sync "Mock partiel" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock partiel cr√©√©'

# √âtape 7: Configurer des expectations
'phpunit:expect $userRepository->findById(1)->willReturn($user)' \
test_session_sync "Configurer expectation" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Expectation configur√©e'

# √âtape 8: Expectation avec argument any
'phpunit:expect $paymentService->process(Argument::any())->willReturn(true)' \
test_session_sync "Expectation avec Argument::any()" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Expectation configur√©e'

# √âtape 9: Expectation avec exception
'phpunit:expect $paymentService->validate(Argument::type(--output-check result))->willThrow(new InvalidArgumentException())' \
test_session_sync "Expectation avec exception" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Expectation configur√©e'

# √âtape 10: Appel de m√©thode originale
'phpunit:call-original $emailService->validate()' \
test_session_sync "Appeler m√©thode originale" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Configuration pour appeler la m√©thode originale'

# √âtape 11: V√©rification des appels
'phpunit:verify $paymentService->process(Argument::any())->wasCalledTimes(2)' \
test_session_sync "V√©rifier les appels" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ V√©rification r√©ussie'

# √âtape 12: Activer espionnage
'phpunit:spy $userRepository' \
test_session_sync "Activer espionnage" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Espionnage activ√© sur $userRepository'

# √âtape 13: Obtenir les appels espionn√©s
'phpunit:get-calls $userRepository' \
test_session_sync "Obtenir appels espionn√©s" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'üìä Appels enregistr√©s'

# √âtape 14: Mock avec JSON invalide (erreur)
'phpunit:mock App\\Service\\TestService --methods "invalid json"' \
test_session_sync "Mock avec JSON invalide" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚ùå Format JSON invalide'

# √âtape 15: Mock avec interface
'phpunit:mock App\\Contract\\PaymentGatewayInterface' \
test_session_sync "Mock d'interface" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock cr√©√©'

# √âtape 16: Mock avec classe abstraite
'phpunit:mock App\\Abstract\\AbstractProcessor' \
test_session_sync "Mock de classe abstraite" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock cr√©√©'

# √âtape 17: Multiples mocks dans le m√™me test
'phpunit:mock App\\Repository\\ProductRepository
test_session_sync "Multiples mocks" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
phpunit:mock App\\Service\\NotificationService' \
'‚úÖ Mock cr√©√©'

# √âtape 18: Mock avec namespace complexe
'phpunit:mock App\\Domain\\User\\Service\\Registration\\EmailVerificationService' \
test_session_sync "Mock avec namespace complexe" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚úÖ Mock cr√©√©'

# √âtape 19: Test workflow complet mock
'phpunit:create CompleteWorkflow
test_session_sync "Workflow complet de mock" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
phpunit:mock App\\Repository\\UserRepository
phpunit:expect $userRepository->findById(1)->willReturn($user)
phpunit:spy $userRepository
phpunit:verify $userRepository->findById(1)->wasCalledOnce()' \
'‚úÖ V√©rification r√©ussie'

# √âtape 20: Mock avec options compl√®tes
'phpunit:mock App\\Service\\ComplexService --variable $complexMock --methods ["process", "validate"] --constructor-args ["dep1", "dep2"] --partial' \
test_session_sync "Mock avec toutes options" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'‚öôÔ∏è Mock partiel activ√©'

# Afficher le r√©sum√©
test_summary

# Sortir avec le code appropri√©
if [[ $FAIL_COUNT -gt 0 ]]; then
    exit 1
else
    exit 0
fi
