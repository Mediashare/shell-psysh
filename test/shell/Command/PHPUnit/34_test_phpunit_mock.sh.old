#!/bin/bash

# Test 34: Commandes phpunit:mock - Syst√®me de mocks et stubs
# Tests d'int√©gration pour les fonctionnalit√©s de mocking PHPUnit

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

# Source les biblioth√®ques de test
source "$SCRIPT_DIR/../../lib/test_utils.sh"

# Initialiser le test
init_test "TEST 34: Commandes phpunit:mock"

# √âtape 1: Cr√©er un test pour les mocks
test_monitor_multiline "Cr√©er un test pour mocks" \
'phpunit:create MockTest' \
'‚úÖ Test cr√©√© : MockTest'

# √âtape 2: Cr√©er un mock simple
test_monitor_multiline "Cr√©er un mock simple" \
'phpunit:mock App\\Repository\\UserRepository' \
'‚úÖ Mock cr√©√©'

# √âtape 3: Cr√©er un mock avec variable personnalis√©e
test_monitor_multiline "Mock avec variable personnalis√©e" \
'phpunit:mock App\\Service\\PaymentService --variable $paymentMock' \
'‚úÖ Mock cr√©√© : $paymentMock'

# √âtape 4: Cr√©er un mock avec m√©thodes sp√©cifi√©es
test_monitor_multiline "Mock avec m√©thodes" \
'phpunit:mock App\\Service\\EmailService --methods ["send", "validate", "queue"]' \
'üîß M√©thodes mock√©es : send, validate, queue'

# √âtape 5: Mock avec arguments constructeur
test_monitor_multiline "Mock avec constructeur" \
'phpunit:mock App\\Service\\ConfigurableService --constructor-args ["arg1", "arg2"]' \
'üèóÔ∏è Arguments constructeur'

# √âtape 6: Mock partiel
test_monitor_multiline "Mock partiel" \
'phpunit:partial-mock App\\Service\\EmailService ["send", "validate"]' \
'‚úÖ Mock partiel cr√©√©'

# √âtape 7: Configurer des expectations
test_monitor_multiline "Configurer expectation" \
'phpunit:expect $userRepository->findById(1)->willReturn($user)' \
'‚úÖ Expectation configur√©e'

# √âtape 8: Expectation avec argument any
test_monitor_multiline "Expectation avec Argument::any()" \
'phpunit:expect $paymentService->process(Argument::any())->willReturn(true)' \
'‚úÖ Expectation configur√©e'

# √âtape 9: Expectation avec exception
test_monitor_multiline "Expectation avec exception" \
'phpunit:expect $paymentService->validate(Argument::type("array"))->willThrow(new InvalidArgumentException())' \
'‚úÖ Expectation configur√©e'

# √âtape 10: Appel de m√©thode originale
test_monitor_multiline "Appeler m√©thode originale" \
'phpunit:call-original $emailService->validate()' \
'‚úÖ Configuration pour appeler la m√©thode originale'

# √âtape 11: V√©rification des appels
test_monitor_multiline "V√©rifier les appels" \
'phpunit:verify $paymentService->process(Argument::any())->wasCalledTimes(2)' \
'‚úÖ V√©rification r√©ussie'

# √âtape 12: Activer espionnage
test_monitor_multiline "Activer espionnage" \
'phpunit:spy $userRepository' \
'‚úÖ Espionnage activ√© sur $userRepository'

# √âtape 13: Obtenir les appels espionn√©s
test_monitor_multiline "Obtenir appels espionn√©s" \
'phpunit:get-calls $userRepository' \
'üìä Appels enregistr√©s'

# √âtape 14: Mock avec JSON invalide (erreur)
test_monitor_error "Mock avec JSON invalide" \
'phpunit:mock App\\Service\\TestService --methods "invalid json"' \
'‚ùå Format JSON invalide'

# √âtape 15: Mock avec interface
test_monitor_multiline "Mock d'interface" \
'phpunit:mock App\\Contract\\PaymentGatewayInterface' \
'‚úÖ Mock cr√©√©'

# √âtape 16: Mock avec classe abstraite
test_monitor_multiline "Mock de classe abstraite" \
'phpunit:mock App\\Abstract\\AbstractProcessor' \
'‚úÖ Mock cr√©√©'

# √âtape 17: Multiples mocks dans le m√™me test
test_monitor_multiline "Multiples mocks" \
'phpunit:mock App\\Repository\\ProductRepository
phpunit:mock App\\Service\\NotificationService' \
'‚úÖ Mock cr√©√©'

# √âtape 18: Mock avec namespace complexe
test_monitor_multiline "Mock avec namespace complexe" \
'phpunit:mock App\\Domain\\User\\Service\\Registration\\EmailVerificationService' \
'‚úÖ Mock cr√©√©'

# √âtape 19: Test workflow complet mock
test_monitor_multiline "Workflow complet de mock" \
'phpunit:create CompleteWorkflow
phpunit:mock App\\Repository\\UserRepository
phpunit:expect $userRepository->findById(1)->willReturn($user)
phpunit:spy $userRepository
phpunit:verify $userRepository->findById(1)->wasCalledOnce()' \
'‚úÖ V√©rification r√©ussie'

# √âtape 20: Mock avec options compl√®tes
test_monitor_multiline "Mock avec toutes options" \
'phpunit:mock App\\Service\\ComplexService --variable $complexMock --methods ["process", "validate"] --constructor-args ["dep1", "dep2"] --partial' \
'‚öôÔ∏è Mock partiel activ√©'

# Afficher le r√©sum√©
test_summary

# Sortir avec le code appropri√©
if [[ $FAIL_COUNT -gt 0 ]]; then
    exit 1
else
    exit 0
fi
