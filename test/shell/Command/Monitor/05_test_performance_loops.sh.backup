#!/bin/bash

# Test 05: Performance et boucles
# Test automatisé avec assertions efficaces

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

# Source les bibliothèques de test
source "$SCRIPT_DIR/../../lib/func/loader.sh"
# Charger test_session_sync
source "$(dirname "$0")/../../lib/func/test_session_sync_enhanced.sh"

# Initialiser le test
init_test "TEST 05: Performance et boucles"

# Étape 1: Test somme avec boucle for (formule: n*(n+1)/2)
test_monitor_multiline "Boucle for somme 1-100" \
'$sum = 0;
for ($i = 1; $i <= 100; $i++) {
    $sum += $i;
}
echo $sum;' \
'5050'

# Étape 2: Test somme avec boucle for plus grande
test_monitor_multiline "Boucle for somme 1-1000" \
'$sum = 0;
for ($i = 1; $i <= 1000; $i++) {
    $sum += $i;
}
echo $sum;' \
'500500'

# Étape 3: Comparaison array_sum vs boucle foreach
test_monitor_multiline "Array sum vs foreach" \
'$array = range(1, 100);
$sum1 = array_sum($array);
$sum2 = 0;
foreach ($array as $num) {
    $sum2 += $num;
}
echo ($sum1 === $sum2) ? "identical" : "different";' \
'identical'

# Étape 4: Test performance array_sum optimisé
test_monitor_expression "Array sum optimisé" \
'echo array_sum(range(1, 100));' \
'5050'

# Étape 5: Test génération et comptage de nombres premiers
test_monitor_multiline "Nombres premiers jusqu'à 30" \
'function isPrime($n) {
    if ($n <= 1) return false;
    if ($n <= 3) return true;
    if ($n % 2 == 0 || $n % 3 == 0) return false;
    for ($i = 5; $i * $i <= $n; $i += 6) {
        if ($n % $i == 0 || $n % ($i + 2) == 0) return false;
    }
    return true;
}
$primes = [];
for ($i = 2; $i <= 30; $i++) {
    if (isPrime($i)) $primes[] = $i;
}
echo count($primes);' \
'10'

# Étape 6: Test factorielle avec boucle
test_monitor_multiline "Factorielle avec boucle" \
'$result = 1;
for ($i = 1; $i <= 6; $i++) {
    $result *= $i;
}
echo $result;' \
'720'

# Étape 7: Test performance sur array_filter
test_monitor_multiline "Array filter nombres pairs" \
'$numbers = range(1, 20);
$evens = array_filter($numbers, function($n) {
    return $n % 2 == 0;
});
echo count($evens);' \
'10'

# Étape 8: Test performance avec mesure de temps (max 5 secondes)
test_monitor_performance "Performance boucle 1-10000" \
'$sum = 0; for ($i = 1; $i <= 10000; $i++) { $sum += $i; } echo $sum;' \
5

# Afficher le résumé
test_summary

# Sortir avec le code approprié
if [[ $FAIL_COUNT -gt 0 ]]; then
    exit 1
else
    exit 0
fi
