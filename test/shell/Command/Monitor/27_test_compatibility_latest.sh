#!/bin/bash

# Test 27: Test de compatibilit√© avec les derni√®res am√©liorations
# V√©rifie le fonctionnement des nouveaux services

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

# Source les biblioth√®ques de test
source "$SCRIPT_DIR/../../lib/func/loader.sh"
# Charger test_session_sync
source "$(dirname "$0")/../../lib/func/test_session_sync_enhanced.sh"

# Initialiser le test
init_test "TEST 27: Compatibilit√© avec les derni√®res am√©liorations"

# === TESTS DE D√âTECTION DES FONCTIONNALIT√âS ===

print_colored "$BLUE" "=== TESTS DE D√âTECTION DES FONCTIONNALIT√âS ==="

# √âtape 1: V√©rifier la disponibilit√© de la commande monitor
echo ""
print_colored "$YELLOW" ">>> √âtape 2: V√©rification de la commande monitor"
test_output=$(echo "help" | "$PROJECT_ROOT/bin/psysh" --config "$project_root/config/config.php" 2>&1)
if echo "$test_output" | grep -q -i "\bmonitor\b"; then
    print_colored "$GREEN" "‚úÖ INFO: Commande monitor disponible"
    MONITOR_AVAILABLE=true
else
    print_colored "$YELLOW" "‚ö†Ô∏è  INFO: Commande monitor non trouv√©e (fonctionnalit√© optionnelle)"
    MONITOR_AVAILABLE=false
fi
TEST_COUNT=$((TEST_COUNT + 1))
PASS_COUNT=$((PASS_COUNT + 1))

# === TESTS DE BASE AVEC NOUVELLES FONCTIONNALIT√âS ===

print_colored "$BLUE" "=== TESTS DE BASE AVEC NOUVELLES FONCTIONNALIT√âS ==="

# √âtape 3: Test simple avec monitor
'echo 2 + 3' \
test_session_sync "Test simple avec monitor" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context monitor \
    --output-check contains \
    --tag "monitor_session"
'5'

# √âtape 4: Test avec variables
'$x = 10; $y = 20; $result = $x + $y;
test_session_sync "Test avec variables" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
echo $result;' \
'30'

# √âtape 5: Test avec fonction
'function double($n) { return $n * 2; }
test_session_sync "Test avec fonction" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
echo double(21);' \
'42'

# === TESTS DE SYNCHRONISATION AM√âLIOR√âE ===

print_colored "$BLUE" "=== TESTS DE SYNCHRONISATION AM√âLIOR√âE ==="

# √âtape 6: Test de persistance des variables
'$global_var = --expect "test_value";' \
test_session_sync "Persistance des variables" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'echo $global_var;' \
'test_value'

# √âtape 7: Test de persistance des fonctions
'function test_func() { return "function_works"; }' \
test_session_sync "Persistance des fonctions" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'echo test_func();' \
'function_works'

# === TESTS DE GESTION D'ERREUR AM√âLIOR√âE ===

print_colored "$BLUE" "=== TESTS DE GESTION D'ERREUR AM√âLIOR√âE ==="

# √âtape 8: Test d'erreur de syntaxe
'$x = ' \
test_session_sync "Erreur de syntaxe" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'(PARSE ERROR|Parse error|syntax error|unexpected|Error:.*syntax error|Error:.*Unclosed|Syntax error|PHP Parse error|TypeError.*null given)'

# √âtape 9: Test d'erreur de variable non d√©finie
'echo $undefined_variable' \
test_session_sync "Variable non d√©finie" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'(Undefined variable|Error:.*Undefined variable|Notice|Warning|TypeError)'

# √âtape 10: Test d'erreur de fonction non d√©finie  
'undefined_function()' \
test_session_sync "Fonction non d√©finie" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'(Call to undefined function|Error:.*undefined function|Fatal error|TypeError)'

# === TESTS DE PERFORMANCE ET ROBUSTESSE ===

print_colored "$BLUE" "=== TESTS DE PERFORMANCE ET ROBUSTESSE ==="

# √âtape 11: Test de performance simple
'echo array_sum(range(1, 1000))' \
test_session_sync "Performance simple" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'2'

# √âtape 12: Test avec boucle
'$sum = 0;
test_session_sync "Test avec boucle" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
for ($i = 1; $i <= 10; $i++) {
    $sum += $i;
}
echo $sum;' \
'55'

# === TESTS D'INT√âGRATION ===

print_colored "$BLUE" "=== TESTS D'INT√âGRATION ==="

# √âtape 13: Test d'int√©gration avec classes
'class TestClass {
test_session_sync "Test avec classe" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
    public function getValue() {
        return "class_value";
    }
}
$obj = new TestClass();
echo $obj->getValue();' \
'class_value'

# √âtape 14: Test avec closure
'$multiplier = 3;
test_session_sync "Test avec closure" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
$closure = function($x) use ($multiplier) {
    return $x * $multiplier;
};
echo $closure(7);' \
'21'

# === TESTS DE COMPATIBILIT√â DESCENDANTE ===

print_colored "$BLUE" "=== TESTS DE COMPATIBILIT√â DESCENDANTE ==="

# √âtape 15: Test avec ancien format
'echo strlen("hello")' \
test_session_sync "Format ancien compatible" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'5'

# √âtape 16: Test avec expressions complexes
'echo json_encode(["key" => "value"])' \
test_session_sync "Expression complexe" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'{"key":"value"}'

# === R√âCAPITULATIF ===

print_colored "$BLUE" "=== R√âCAPITULATIF DES FONCTIONNALIT√âS ==="

echo ""
print_colored "$CYAN" "Fonctionnalit√©s d√©tect√©es:"
print_colored "$GREEN" "  ‚úÖ Mode normal: Fonctionnel avec --no-interactive"

echo ""
print_colored "$CYAN" "Am√©liorations test√©es:"
print_colored "$GREEN" "  ‚úÖ Commande monitor refactoris√©e"
print_colored "$GREEN" "  ‚úÖ Gestion d'erreurs am√©lior√©e" 
print_colored "$GREEN" "  ‚úÖ Synchronisation des variables/fonctions"
print_colored "$GREEN" "  ‚úÖ Support des nouvelles fonctionnalit√©s PHP"
print_colored "$GREEN" "  ‚úÖ Compatibilit√© descendante maintenue"

# Afficher le r√©sum√©
test_summary

# Message final
echo ""
if [[ $FAIL_COUNT -eq 0 ]]; then
    print_colored "$GREEN" "üéâ Tous les tests de compatibilit√© sont PASS√âS !"
    print_colored "$GREEN" "   Les derni√®res am√©liorations fonctionnent correctement."
else
    print_colored "$RED" "‚ö†Ô∏è  Certains tests ont √©chou√©."
    print_colored "$YELLOW" "   V√©rifiez la configuration et les services."
fi

# Sortir avec le code appropri√©
if [[ $FAIL_COUNT -gt 0 ]]; then
    exit 1
else
    exit 0
fi
