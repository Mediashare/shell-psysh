#!/bin/bash

# Test 26: Edge cases et robustesse du syst√®me monitor
# Tests cr√©atifs pour tester les limites et la robustesse

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

# Source les biblioth√®ques de test
source "$SCRIPT_DIR/../../lib/func/loader.sh"
# Charger test_session_sync
source "$(dirname "$0")/../../lib/func/test_session_sync_enhanced.sh"

# Initialiser le test
init_test "TEST 26: Edge cases et robustesse"

# === TESTS DE SYNTAXE LIMITE ===

# √âtape 1: Code PHP avec syntaxe valide mais complexe
'($x = 5) && ($y = 10) ? $x + $y : 0' \
test_session_sync "Syntaxe complexe mais valide" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'15'

# √âtape 2: Op√©rateurs ternaires imbriqu√©s
'$a = 1; $b = 2; echo $a < $b ? ($a == 1 ? "one" : "not one") : "b smaller"' \
test_session_sync "Ternaires imbriqu√©s" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'one'

# √âtape 3: Test avec caract√®res √©chapp√©s complexes
'"He said: \"Hello\", then \\added\\ backslashes"' \
test_session_sync "Caract√®res √©chapp√©s" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'He said: "Hello", then \added\ backslashes'

# === TESTS D'ERREURS CR√âATIVES ===

# √âtape 4: Division par z√©ro avec gestion
'echo 1/0' \
test_session_sync "Division par z√©ro" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'Division by zero|DivisionByZeroError'

# √âtape 5: Stack overflow avec r√©cursion
'function boom() { return boom(); } boom()' \
test_session_sync "Stack overflow" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'infinite loop|stack depth'

# √âtape 6: Parse error cr√©atif
'if ($x { echo "broken"' \
test_session_sync "Parse error cr√©atif" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'Parse error|syntax error'

# √âtape 7: Erreur de type strict
'function strict(int $x): string { return $x; } strict("not int")' \
test_session_sync "Erreur de type" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'TypeError|Argument.*must be.*int'

# === TESTS DE LIMITES M√âMOIRE ===

# √âtape 8: String tr√®s longue
'echo strlen(str_repeat("x", 50000))' \
test_session_sync "String tr√®s longue" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'3'

# √âtape 9: Array avec beaucoup d'√©l√©ments
'echo count(range(1, 10000))' \
test_session_sync "Array volumineux" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'2'

# √âtape 10: Boucle intense mais limit√©e
'$sum = 0; for($i = 0; $i < 1000; $i++) { $sum += sin($i); } echo "done"' \
test_session_sync "Boucle intense" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'3'

# === TESTS DE CARACT√àRES SP√âCIAUX ===

# √âtape 11: Unicode et √©mojis
'"H√©llo ‰∏ñÁïå üåç üöÄ"' \
test_session_sync "Unicode et √©mojis" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'H√©llo ‰∏ñÁïå üåç üöÄ'

# √âtape 12: Caract√®res de contr√¥le s√©curis√©s
'echo addslashes("quote\"and\\backslash")' \
test_session_sync "Caract√®res √©chapp√©s s√©curis√©s" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'quote.*and.*backslash'

# √âtape 13: NULL bytes handling
'echo "\0\0\0"' \
test_session_sync "NULL bytes" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'.*'

# === TESTS DE TYPES AVANC√âS ===

# √âtape 14: Manipulation de types complexes
'$complex = [
test_session_sync "Types complexes" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
    "string" => "value",
    --output-check result => [1, 2, 3],
    --output-check result => new stdClass(),
    "null" => null,
    "bool" => true
];
echo count($complex);' \
'5'

# √âtape 15: S√©rialisation/d√©s√©rialisation
'$obj = new stdClass(); $obj->prop = 42; echo unserialize(serialize($obj))->prop' \
test_session_sync "S√©rialisation" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'42'

# === TESTS DE CONCURRENCE ET √âTAT ===

# √âtape 16: Variables statiques
'function counter() {
test_session_sync "Variables statiques" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
    static $count = 0;
    return ++$count;
}
echo counter() . "," . counter();' \
'1,2'

# √âtape 17: √âtat global complexe
'class GlobalState {
test_session_sync "√âtat global complexe" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
    public static $data = [];
    public static function set($k, $v) {
        self::$data[$k] = $v;
    }
}
GlobalState::set("test", "value");
echo GlobalState::$data["test"];' \
'value'

# === TESTS DE PERFORMANCE EXTR√äME ===

# √âtape 18: Calcul math√©matique intensif
'$result = 0; for($i = 1; $i <= 1000; $i++) { $result += sqrt($i); } $result > 20000' \
test_session_sync "Calcul intensif" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'4'

# √âtape 19: Manipulation de strings intensive
'$s = ""; for($i = 0; $i < 500; $i++) { $s = md5($s . $i); } strlen($s)' \
test_session_sync "String intensive" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'3'

# === TESTS DE S√âCURIT√â ===

# √âtape 20: Code potentiellement dangereux mais s√©curis√©
'eval("return system(\"echo safe\");")' \
test_session_sync "Code potentiellement dangereux" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'safe'

# √âtape 21: Injection de code impossible
'htmlspecialchars("<script>alert(\"xss\")</script>")' \
test_session_sync "Code s√©curis√©" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;'

# === TESTS D'INT√âGRATION PSYSH ===

# √âtape 22: Utilisation des features PsySH
'$reflection = new ReflectionFunction("strlen");
test_session_sync "Features PsySH" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
echo $reflection->getName();' \
'strlen'

# √âtape 23: Autoload et namespaces
'class_exists("DateTime")' \
test_session_sync "Autoload test" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'true'

# === TESTS DE R√âCUP√âRATION D'ERREUR ===

# √âtape 24: R√©cup√©ration apr√®s erreur
'try { throw new Exception("test error"); } catch (Exception $e) { echo "handled"; }' \
test_session_sync "R√©cup√©ration apr√®s erreur" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'echo "recovered"' \
'recovered'

# √âtape 25: √âtat consistent apr√®s erreur
'$test_var = "before_error";' \
test_session_sync "√âtat apr√®s erreur" \
    --step "" \ --context psysh --output-check contains --tag "default_session"
    --context psysh \
    --output-check contains \
    --psysh \
    --tag "default_session"
'try { throw new Exception("test"); } catch (Exception $e) {} echo $test_var' \
'before_error'

# Afficher le r√©sum√©
test_summary

# Sortir avec le code appropri√©
if [[ $FAIL_COUNT -gt 0 ]]; then
    exit 1
else
    exit 0
fi
